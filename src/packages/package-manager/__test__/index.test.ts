import { existsSync as exists } from 'fs'
import { join } from 'path'
import { mkdir, rm } from 'shelljs'
import pkgm from '..'
import { write, readJSON, writeJSON } from '@ko/utils/fs'

const OUTPUT_DIR = join(__dirname, 'output')
const INIT_DIR = join(OUTPUT_DIR, 'init')
const YARN_DIR = join(OUTPUT_DIR, 'yarn')
const INIT_NODE_MODULES = join(OUTPUT_DIR, 'init', 'node_modules')
const PKG_PATH = join(OUTPUT_DIR, 'package.json')

const examplePackage = JSON.stringify({
  name: 'package',
  description: '',
  version: '1.0.0',
  main: 'index.js',
})

const exampleYarnLock = `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
# yarn lockfile v1
package-1@^1.0.0:
  version "1.0.3"
  resolved "https://registry.npmjs.org/package-1/-/package-1-1.0.3.tgz#a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0"`

describe('packages/package-manager', () => {
  beforeAll(() => {
    if (exists(OUTPUT_DIR)) {
      rm('-rf', OUTPUT_DIR)
    }

    mkdir(OUTPUT_DIR)
    mkdir(INIT_DIR)
    mkdir(YARN_DIR)

    write(join(YARN_DIR, 'yarn.lock'), exampleYarnLock)

    write(join(OUTPUT_DIR, 'package.json'), examplePackage)
    process.chdir(OUTPUT_DIR)
  })

  afterAll(() => {
    process.chdir('../')
  })

  describe('init', () => {
    it('should initialize a package.json', async () => {
      process.chdir(INIT_DIR)
      await pkgm().init()
      expect(exists(join(OUTPUT_DIR, 'init', 'package.json'))).toEqual(true)
      process.chdir(OUTPUT_DIR)
    })
  })

  describe('which', () => {
    it('should determine package as npm', () => {
      process.chdir(OUTPUT_DIR)
      expect(pkgm().which()).toEqual('npm')
      process.chdir('../')
    })

    it('should determine package as yarn', () => {
      process.chdir(YARN_DIR)
      expect(process.cwd()).toEqual(YARN_DIR)
      expect(pkgm().which()).toEqual('yarn')
      process.chdir('../')
    })
  })

  describe('install', () => {
    beforeAll(() => {
      const pkgPath = join(OUTPUT_DIR, 'init', 'package.json')
      const pkg = readJSON(pkgPath)
      writeJSON(pkgPath, { ...pkg, dependencies: { lodash: '4.17.20' } })
    })

    beforeEach(() => {
      process.chdir(INIT_DIR)
      rm('-rf', INIT_NODE_MODULES)
    })

    describe('async', () => {
      it('should install node_modules', async () => {
        await pkgm().install()
        expect(exists(INIT_NODE_MODULES)).toEqual(true)
      })
    })

    describe('sync', () => {
      it('should install node_modules', () => {
        pkgm().installSync()
        expect(exists(INIT_NODE_MODULES)).toEqual(true)
      })
    })
  })

  describe('run', () => {
    describe('add', () => {
      beforeEach(() => process.chdir(OUTPUT_DIR))

      describe('async', () => {
        it('should install a dependency', async () => {
          await pkgm().add(['lodash'])
          const pkg = readJSON(PKG_PATH) as any
          expect(pkg?.dependencies?.lodash).not.toBeUndefined()
        })

        it('should install a dependency with version', async () => {
          await pkgm().add([{ name: 'moment', version: '2.9.0' }])
          const pkg = readJSON(PKG_PATH) as any
          expect(pkg?.dependencies?.moment).toContain('2.9.0')
        })

        it('should install a dev dependency', async () => {
          await pkgm().add([{ name: 'babel', dev: true }])
          const pkg = readJSON(PKG_PATH) as any
          expect(pkg?.devDependencies?.babel).not.toBeUndefined()
        })
      })

      describe('sync', () => {
        it('should install a dependency', () => {
          pkgm().addSync(['react'])
          const pkg = readJSON(PKG_PATH) as any
          expect(pkg?.dependencies?.react).not.toBeUndefined()
        })

        it('should install a dependency with version', () => {
          pkgm().addSync([{ name: 'react-dom', version: '15.4.1' }])
          const pkg = readJSON(PKG_PATH) as any
          expect(pkg?.dependencies).not.toBeUndefined()
          expect(pkg?.dependencies['react-dom']).toContain('15.4.1')
        })

        it('should install a dev dependency', () => {
          pkgm().addSync([{ name: 'vue', dev: true }])
          const pkg = readJSON(PKG_PATH) as any
          expect(pkg?.devDependencies?.vue).not.toBeUndefined()
        })
      })
    })
  })

  describe('remove', () => {
    describe('async', () => {
      it('should remove a dependency', async () => {
        await pkgm().remove(['lodash'])
        const pkg = readJSON(PKG_PATH) as any
        expect(pkg?.dependencies?.lodash).toBeUndefined()
      })

      it('should remove a dependency with version', async () => {
        await pkgm().remove([{ name: 'moment' }])
        const pkg = readJSON(PKG_PATH) as any
        expect(pkg?.dependencies?.moment).toBeUndefined()
      })

      it('should remove a dev dependency', async () => {
        await pkgm().remove([{ name: 'babel', dev: true }])
        const pkg = readJSON(PKG_PATH) as any
        expect(pkg?.devDependencies?.babel).toBeUndefined()
      })
    })

    describe('sync', () => {
      it('should install a dependency', () => {
        pkgm().removeSync(['react'])
        const pkg = readJSON(PKG_PATH) as any
        expect(pkg?.dependencies?.react).toBeUndefined()
      })

      it('should install a dependency with version', () => {
        pkgm().removeSync([{ name: 'react-dom' }])
        const pkg = readJSON(PKG_PATH) as any
        expect(pkg?.dependencies).not.toBeUndefined()
        expect(pkg?.dependencies['react-dom']).toBeUndefined()
      })

      it('should install a dev dependency', () => {
        pkgm().removeSync([{ name: 'vue', dev: true }])
        const pkg = readJSON(PKG_PATH) as any
        expect(pkg?.devDependencies?.vue).toBeUndefined()
      })
    })
  })

  describe('has', () => {
    beforeAll(() => {
      pkgm().addSync(['express'])
    })

    it('should find express in dependencies', () => {
      expect(pkgm().has('express')).toEqual(true)
    })

    it('should not find chalk', () => {
      expect(pkgm().has('chalk')).toEqual(false)
    })

    it('should not find any package without a package.json', () => {
      process.chdir(YARN_DIR)
      expect(pkgm().has('react')).toEqual(false)
      process.chdir('../')
    })
  })
})
